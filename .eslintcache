[{"/Users/developjik/Desktop/recog/src/App.js":"1","/Users/developjik/Desktop/recog/src/serviceWorker.js":"2","/Users/developjik/Desktop/recog/src/components/views/RegisterPage/RegisterPage.js":"3","/Users/developjik/Desktop/recog/src/components/views/Footer/Footer.js":"4","/Users/developjik/Desktop/recog/src/components/views/NavBar/Sections/RightMenu.js":"5","/Users/developjik/Desktop/recog/src/components/Config.js":"6","/Users/developjik/Desktop/recog/src/components/views/LoginPage/LoginPage.js":"7","/Users/developjik/Desktop/recog/src/components/views/NavBar/Sections/LeftMenu.js":"8","/Users/developjik/Desktop/recog/src/components/views/LandingPage/LandingPage.js":"9","/Users/developjik/Desktop/recog/src/components/views/TestPage/MakeTestPage.js":"10","/Users/developjik/Desktop/recog/src/components/views/RoomPage/JoinRoomPage.js":"11","/Users/developjik/Desktop/recog/src/components/views/RoomPage/OvVideo.js":"12","/Users/developjik/Desktop/recog/src/hoc/auth.js":"13","/Users/developjik/Desktop/recog/src/_actions/user_action.js":"14","/Users/developjik/Desktop/recog/src/components/views/RoomPage/UserVideoComponent.js":"15","/Users/developjik/Desktop/recog/src/_reducers/user_reducer.js":"16","/Users/developjik/Desktop/recog/src/components/views/NavBar/NavBar.js":"17","/Users/developjik/Desktop/recog/src/_actions/type.js":"18"},{"size":1362,"mtime":1607891463323,"results":"19","hashOfConfig":"20"},{"size":5086,"mtime":1607831392000,"results":"21","hashOfConfig":"20"},{"size":4854,"mtime":1607831392000,"results":"22","hashOfConfig":"20"},{"size":129,"mtime":1607831392000,"results":"23","hashOfConfig":"20"},{"size":1073,"mtime":1607893914767,"results":"24","hashOfConfig":"20"},{"size":89,"mtime":1607865233399,"results":"25","hashOfConfig":"20"},{"size":2999,"mtime":1607893142793,"results":"26","hashOfConfig":"20"},{"size":737,"mtime":1607928358315,"results":"27","hashOfConfig":"20"},{"size":334,"mtime":1607887540740,"results":"28","hashOfConfig":"20"},{"size":5112,"mtime":1607895063297,"results":"29","hashOfConfig":"20"},{"size":37114,"mtime":1607943314150,"results":"30","hashOfConfig":"20"},{"size":630,"mtime":1607843324057,"results":"31","hashOfConfig":"20"},{"size":1110,"mtime":1607891378287,"results":"32","hashOfConfig":"20"},{"size":2204,"mtime":1607891008995,"results":"33","hashOfConfig":"20"},{"size":784,"mtime":1607843336495,"results":"34","hashOfConfig":"20"},{"size":702,"mtime":1607897998161,"results":"35","hashOfConfig":"20"},{"size":1345,"mtime":1607894837716,"results":"36","hashOfConfig":"20"},{"size":301,"mtime":1607831392000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"euqun9",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/developjik/Desktop/recog/src/App.js",[],["81","82"],"/Users/developjik/Desktop/recog/src/serviceWorker.js",[],["83","84"],"/Users/developjik/Desktop/recog/src/components/views/RegisterPage/RegisterPage.js",["85","86","87"],"/Users/developjik/Desktop/recog/src/components/views/Footer/Footer.js",[],["88","89"],"/Users/developjik/Desktop/recog/src/components/views/NavBar/Sections/RightMenu.js",[],"/Users/developjik/Desktop/recog/src/components/Config.js",[],"/Users/developjik/Desktop/recog/src/components/views/LoginPage/LoginPage.js",[],"/Users/developjik/Desktop/recog/src/components/views/NavBar/Sections/LeftMenu.js",[],"/Users/developjik/Desktop/recog/src/components/views/LandingPage/LandingPage.js",[],"/Users/developjik/Desktop/recog/src/components/views/TestPage/MakeTestPage.js",["90"],"import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { MakeTest, UploadQuestion } from '../../../_actions/user_action'\nimport { withRouter } from 'react-router-dom'\nimport { Button, Input, Form, Layout } from 'antd';\n\nfunction MakeTestPage(props) {\n\n  const dispatch = useDispatch();\n  const {Content} = Layout;\n  const [Title, setTitle] = useState(\"\")\n  const [Choice1, setChoice1] = useState(\"\")\n  const [Choice2, setChoice2] = useState(\"\")\n  const [Choice3, setChoice3] = useState(\"\")\n  const [Choice4, setChoice4] = useState(\"\")\n  const [CorrectIdx, setCorrectIdx] = useState(\"\")\n\n  const [UploadedQuestions, setUploadedQuestions] = useState(0)\n\n  const [ExamId, setExamId] = useState(\"\")\n  const [QuestionsIds, setQuestionsIds] = useState([])\n  \n\n  const setTitleHandler = (event) =>{ \n    setTitle(event.currentTarget.value)\n  }\n  const setChoiceHandler1 = (event) =>{ \n    setChoice1(event.currentTarget.value)\n  }\n  const setChoiceHandler2 = (event) =>{ \n    setChoice2(event.currentTarget.value)\n  }\n  const setChoiceHandler3 = (event) =>{ \n    setChoice3(event.currentTarget.value)\n  }\n  const setChoiceHandler4 = (event) =>{ \n    setChoice4(event.currentTarget.value)\n  }\n  const setCorrectIdxHandler = (event) =>{ \n    setCorrectIdx(event.currentTarget.value)\n  }\n\n  const setExamHandler = (event) =>{ \n    setExamId(event.currentTarget.value)\n  }\n\n  const onUploadHandler = (event) =>{\n    // 계속 새로고침 방지\n    event.preventDefault();\n    \n    let body = {\n      Question_id: Math.floor( Math.random() * 100000 ),\n      title: Title,\n      choice : [Choice1,Choice2,Choice3,Choice4],\n      correct_idx : CorrectIdx\n    }\n\n    QuestionsIds.push(body.Question_id)\n    \n    dispatch(UploadQuestion(body))\n    .then(response => {\n      if(response.payload.success){\n        setUploadedQuestions(UploadedQuestions + 1)\n        setTitle(\"\")\n        setChoice1(\"\")\n        setChoice2(\"\")\n        setChoice3(\"\")\n        setChoice4(\"\")\n        setCorrectIdx(\"\")\n        } else{\n          alert(\"Failed to Upload Question Info.\")\n        }\n      })\n  }\n\n  const onMakeTestHandler = (event) =>{\n    // 계속 새로고침 방지\n    event.preventDefault();\n    let body = {\n      Exam_id: ExamId,\n      Exam_code:  Math.floor( Math.random() * 1000000 ),\n      Questions : QuestionsIds\n    }\n \n    dispatch(MakeTest(body))\n    .then(response => {\n      if(response.payload.success){\n          props.history.push(\"/\")\n        } else{\n          alert(\"Failed to Send Question Info.\")\n        }\n      })\n  }\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 10 },\n      sm: { span: 15 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 10 },\n    },\n  };\n\n  const formItemLayout2 = {\n    labelCol: {\n      xs: { span: 5 },\n      sm: { span: 5 },\n    },\n    wrapperCol: {\n      xs: { span: 4 },\n      sm: { span: 6 },\n    },\n  };\n\n  const tailLayout = {\n  wrapperCol: {\n    offset: 16,\n    span: 24,\n    },\n  };\n  const tailLayout2 = {\n  wrapperCol: {\n    offset: 5,\n    span: 24,\n    },\n  };\n\n  return (\n    <div style = {{\n        display: 'flex', justifyContent: 'center', alignItems: 'center', width:'100%', height: '100vh'\n      }}>\n    <Content>\n      <Form {...formItemLayout}>\n        <Form.Item\n          label = \"Question Title\"\n        >\n          <Input placeholder=\"Title\" value={Title} onChange={setTitleHandler}/>\n        </Form.Item>\n\n        <Form.Item\n          label = \"Choice1\"\n        >\n          <Input placeholder=\"Choice1\" value={Choice1} onChange={setChoiceHandler1}/>\n        </Form.Item>\n        \n        <Form.Item\n          label = \"Choice2\"\n        >\n          <Input placeholder=\"Choice2\" value={Choice2} onChange={setChoiceHandler2}/>\n        </Form.Item>\n\n        <Form.Item\n          label = \"Choice3\"\n        >\n          <Input placeholder=\"Choice4\" value={Choice3} onChange={setChoiceHandler3}/>\n        </Form.Item>\n\n        <Form.Item\n          label = \"Choice4\"\n        >\n          <Input placeholder=\"Choice4\" value={Choice4} onChange={setChoiceHandler4}/>\n        </Form.Item>\n\n        <Form.Item\n          label = \"Correct Idx\"\n        >\n          <Input placeholder=\"Choice4\" value={CorrectIdx} onChange={setCorrectIdxHandler}/>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"reset\" onClick={onUploadHandler}>\n            Upload Questions\n          </Button>\n        </Form.Item>\n      </Form>\n    </Content>\n    <Content>\n      <Form {...formItemLayout2}>\n        <Form.Item\n          label = \"Questions\"\n        >\n          <Input value={UploadedQuestions} disabled={true}/>\n        </Form.Item>\n\n        <Form.Item\n          label = \"Exam_Name\"\n        >\n          <Input placeholder=\"Exam_Name\" value={ExamId} onChange={setExamHandler}/>\n        </Form.Item>\n\n        <Form.Item {...tailLayout2}>\n          <Button type=\"primary\" htmlType=\"submit\" onClick={onMakeTestHandler}>\n            End make Test\n          </Button>\n        </Form.Item>\n      </Form>\n    </Content>\n    </div>\n   \n  )\n}\n\nexport default withRouter(MakeTestPage)\n","/Users/developjik/Desktop/recog/src/components/views/RoomPage/JoinRoomPage.js",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],"import axios from \"axios\";\nimport { OpenVidu } from \"openvidu-browser\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport UserVideoComponent from \"./UserVideoComponent\";\nimport * as ml5 from \"ml5\";\nimport * as faceapi from \"face-api.js\";\nimport {\n  Button,\n  notification,\n  Form,\n  Input,\n  Layout,\n  PageHeader,\n  Statistic,\n  message,\n  Spin,\n  Result,\n  List,\n  Avatar,\n  Radio,\n  Row,\n  Col,\n  Typography,\n  Pagination,\n} from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchExam, FetchQuestions } from \"../../../_actions/user_action\";\nimport { withRouter } from \"react-router-dom\";\nimport {\n  RightSquareOutlined,\n  UserOutlined,\n  LoginOutlined,\n  FormOutlined,\n} from \"@ant-design/icons\";\nimport \"./JoinRoom.css\";\n\nconst { Sider, Content } = Layout;\nconst { Countdown } = Statistic;\nconst { Title, Text } = Typography;\nconst { Search } = Input;\n\nlet score = 0;\nlet correct = 0;\n\nconst bucketName = \"developjikvideo\";\nconst bucketRegion = \"us-east-1\"; // 리전\nconst IdentityPoolId = \"us-east-1:5eca9ef0-7737-4709-86bd-c45661c424f7\";\nconst albumName = \"video\";\n\nconst s3 = new window.AWS.S3({\n  apiVersion: \"2006-03-01\",\n  params: {\n    Bucket: bucketName,\n  },\n});\n\nwindow.AWS.config.update({\n  region: bucketRegion,\n  credentials: new window.AWS.CognitoIdentityCredentials({\n    IdentityPoolId: IdentityPoolId,\n  }),\n});\n\nlet OV;\nlet records;\nlet connectionData = [];\n\nlet faceapiInterval;\nlet objectdetectInterval;\nlet sidefaceInterval;\nlet faceReocogCheckInterval\n\nlet userimage = \"\";\n\nfunction JoinRoomPage(props) {\n  const user = useSelector((state) => state.user);\n  let videoRef = useRef();\n  let objectDetector;\n  let classifier;\n  let blob;\n\n  let images = [\"/uploads/unknown1.png\", \"/uploads/unknown2.png\", \"/uploads/unknown3.png\", \"/uploads/unknown4.png\", \"/uploads/unknown5.png\"];\n  // axios로 사용자 이미지 요청하여 저장할 변수\n\n  // const OPENVIDU_SERVER_URL = \"https://\" + \"window.location.hostname\" + \":4443\";\n  const OPENVIDU_SERVER_URL =\n    \"https://ec2-52-78-164-15.ap-northeast-2.compute.amazonaws.com\";\n  const OPENVIDU_SERVER_SECRET = \"MY_SECRET\";\n\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16,\n    },\n  };\n\n  const [initial, setInital] = useState(0);\n  const [test, setTest] = useState(0);\n  const [timer, setTimer] = useState(0);\n\n  // ================================================\n\n  const userLoginInfo = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n\n  let [ExamId, setExamId] = useState(\"\");\n  const [ExamCode, setExamCode] = useState(\"\");\n  const [Questions, setQuestions] = useState([]);\n  const [RoomNo, setRoomNo] = useState(0);\n  const [nowQuestion, setnowQuestion] = useState({\n    title: \"\",\n    choice1: \"\",\n    choice2: \"\",\n    choice3: \"\",\n    choice4: \"\",\n  });\n  const [nowQuestionidx, setnowQuestionidx] = useState(1);\n  const [ExamQuestions, setExamQuestions] = useState([]);\n  const [ExamAnswers, setExamAnswers] = useState([]);\n\n  const [UserExamCode, setUserExamCode] = useState(\"\"); // User가 방이름이랑 같이 입력할 코드\n  const [UserDisabled, setUserDisabled] = useState(true);\n  const [TotalQuestions, setTotalQuestions] = useState(\"\");\n\n  const [RadioValue, setRadioValue] = useState(\"\");\n\n  const [state, setState] = useState({\n    mySessionId: \"Room01\",\n    myUserName: \"User\" + Math.floor(Math.random() * 100),\n    session: undefined,\n    mainStreamManager: undefined,\n    publisher: undefined,\n    subscribers: [],\n  });\n\n  // 건드리지 말것\n  const getToken = () => {\n    return createSession(state.mySessionId).then((sessionId) =>\n      createToken(sessionId)\n    );\n  };\n\n  const createSession = (sessionId) => {\n    return new Promise((resolve, reject) => {\n      var data = JSON.stringify({ customSessionId: sessionId });\n      axios\n        .post(OPENVIDU_SERVER_URL + \"/openvidu/api/sessions\", data, {\n          headers: {\n            Authorization:\n              \"Basic \" + btoa(\"OPENVIDUAPP:\" + OPENVIDU_SERVER_SECRET),\n            \"Content-Type\": \"application/json\",\n          },\n        })\n        .then((response) => {\n          console.log(\"CREATE SESION\", response);\n          resolve(response.data.id);\n        })\n        .catch((response) => {\n          var error = Object.assign({}, response);\n          if (error.response.status === 409) {\n            resolve(sessionId);\n          } else {\n            console.log(error);\n            console.warn(\n              \"No connection to OpenVidu Server. This may be a certificate error at \" +\n                OPENVIDU_SERVER_URL\n            );\n            if (\n              window.confirm(\n                'No connection to OpenVidu Server. This may be a certificate error at \"' +\n                  OPENVIDU_SERVER_URL +\n                  '\"\\n\\nClick OK to navigate and accept it. ' +\n                  'If no certificate warning is shown, then check that your OpenVidu Server is up and running at \"' +\n                  OPENVIDU_SERVER_URL +\n                  '\"'\n              )\n            ) {\n              window.location.assign(\n                OPENVIDU_SERVER_URL + \"/accept-certificate\"\n              );\n            }\n          }\n        });\n    });\n  };\n\n  const createToken = (sessionId) => {\n    return new Promise((resolve, reject) => {\n      var data = {};\n      axios\n        .post(\n          OPENVIDU_SERVER_URL +\n            \"/openvidu/api/sessions/\" +\n            sessionId +\n            \"/connection\",\n          data,\n          {\n            headers: {\n              Authorization:\n                \"Basic \" + btoa(\"OPENVIDUAPP:\" + OPENVIDU_SERVER_SECRET),\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        )\n        .then((response) => {\n          console.log(\"TOKEN\", response);\n          resolve(response.data.token);\n        })\n        .catch((error) => reject(error));\n    });\n  };\n  // 건드리지 말것\n\n  // video 시작 코드\n  const startVideo = () => {\n    navigator.getUserMedia(\n      { video: {} },\n      (stream) => (videoRef.current.srcObject = stream),\n      (err) => console.error(err)\n    );\n  };\n\n  const startTest = async () => {\n    if (test === 0) {\n      document.querySelector(\"#startTest>span\").innerHTML = \"시험 종료\";\n      document.querySelector(\"#startTest\").disabled = true;\n      await startVideo();\n      message\n        .loading(\"Cam and Test Loading.. 잠시만 기다려 주세요...\", 10)\n        .then(() => {\n          setTest(1);\n          setTimer(1);\n        });\n\n      records = OV.initLocalRecorder(state.mainStreamManager[\"stream\"]);\n      records.record();\n\n      startFaceApi();\n      startObjectDetect();\n      // startMyModel();\n      // startRecognizeFaces();\n      \n    } else {\n      state.session\n        .signal({\n          data: `${state.myUserName} 시험 종료`, // Any string (optional)\n          to: connectionData, // Array of Connection objects (optional. Broadcast to everyone if empty)\n          type: \"endTest\", // The type of message (optional)\n        })\n        .then(() => {\n          setInital(2);\n          console.log(\"메시지 전송 성공\");\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n\n  const startDownload = async () => {\n    // setTimer(0);\n    document.querySelector(\"#startTest\").disabled = false;\n    clearInterval(faceapiInterval);\n    clearInterval(objectdetectInterval);\n    // clearInterval(sidefaceInterval);\n    // clearInterval(faceReocogCheckInterval())\n    await records.stop();\n    blob = records.getBlob();\n    uploadVideo();\n  };\n\n  const startFaceApi = () => {\n    let checkFaceZero = 0;\n    let checkFaceDouble = 0;\n    let checkStart = 0;\n    faceapiInterval = setInterval(async () => {\n      const detections = await faceapi\n        .detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions())\n        .withFaceLandmarks();\n      checkStart++;\n      if (checkStart > 5) {\n        if (detections.length === 0) {\n          checkFaceZero++;\n          if (checkFaceZero === 5) {\n            // 메세지 보내기 code +\n            state.session\n              .signal({\n                data: `${state.myUserName} Zero Face`, // Any string (optional)\n                to: connectionData, // Array of Connection objects (optional. Broadcast to everyone if empty)\n                type: \"zeroFace\", // The type of message (optional)\n              })\n              .then(() => {\n                console.log(\"메시지 전송 성공\");\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n            checkFaceZero = 0;\n          }\n        } else if (detections.length >= 2) {\n          checkFaceDouble++;\n          if (checkFaceDouble === 7) {\n            //메세지 보내기 code +\n            state.session\n              .signal({\n                data: `${state.myUserName} Too Many Face`, // Any string (optional)\n                to: connectionData, // Array of Connection objects (optional. Broadcast to everyone if empty)\n                type: \"doubleFace\", // The type of message (optional)\n              })\n              .then(() => {\n                console.log(\"메시지 전송 성공\");\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n            checkFaceDouble = 0;\n          }\n        } else {\n          checkFaceZero = 0;\n          checkFaceDouble = 0;\n        }\n\n        console.log(\"FaceApi\", checkStart, detections);\n      }\n    }, 3000);\n  };\n\n  const startObjectDetect = async () => {\n    let checkStart = 0;\n    objectDetector = await ml5.objectDetector(\"cocossd\");\n\n    objectdetectInterval = setInterval(async () => {\n      await objectDetector.detect(videoRef.current, function (err, results) {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        checkStart++;\n        if (checkStart > 5) {\n          console.log(\"ObjectDetection\", checkStart, results);\n          results.map((result, i) => {\n            if (result[\"label\"] === \"cell phone\") {\n              // message 보내는 code +\n              state.session\n                .signal({\n                  data: `${state.myUserName} Cell Phone Detect`, // Any string (optional)\n                  to: connectionData, // Array of Connection objects (optional. Broadcast to everyone if empty)\n                  type: \"cellPhoneDetect\", // The type of message (optional)\n                })\n                .then(() => {\n                  console.log(\"메시지 전송 성공\");\n                })\n                .catch((error) => {\n                  console.error(error);\n                });\n            }\n          });\n        }\n      });\n    }, 3000);\n  };\n\n  const startMyModel = async () => {\n    let checkStart = 0;\n    let checkCount = 0;\n    classifier = await ml5.imageClassifier(\n      process.env.PUBLIC_URL + \"/models/model.json\",\n      videoRef.current,\n      (res) => {\n        sidefaceInterval = setInterval(async () => {\n          await classifier.classify(videoRef.current, (error, results) => {\n            if (error) {\n              console.error(error);\n              return;\n            }\n\n            checkStart++;\n            if (checkStart > 5) {\n              console.log(\"MyModel\", checkStart, results[0]);\n              if (\n                results[0].label !== \"face\" \n              // && results[0].confidence - results[1].confidence > 0.25\n              ) {\n                checkCount++;\n                if (checkCount === 5) {\n                  // 메세지 보내는 code +\n                  state.session\n                    .signal({\n                      data: `${state.myUserName} Side Face Detect`, // Any string (optional)\n                      to: connectionData, // Array of Connection objects (optional. Broadcast to everyone if empty)\n                      type: \"sideFaceDetect\", // The type of message (optional)\n                    })\n                    .then(() => {\n                      console.log(\"메시지 전송 성공\");\n                    })\n                    .catch((error) => {\n                      console.error(error);\n                    });\n                  checkCount = 0;\n                }\n              } else {\n                checkCount = 0;\n              }\n            }\n          });\n        }, 3000);\n      }\n    );\n  };\n\n  const startRecognizeFaces = async () => {\n    \n    const labeledDescriptors = await loadLabeledImages();\n    setTimeout(function () {\n      let checkCount = 0;\n      const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, 0.6);\n      faceReocogCheckInterval = setInterval(async () => {\n        \n        const detections = await faceapi\n          .detectAllFaces(videoRef.current)\n          .withFaceLandmarks()\n          .withFaceDescriptors();\n  \n        const results = detections.map((d) => {\n          return faceMatcher.findBestMatch(d.descriptor);\n        });\n  \n        results.forEach((result, i) => {\n          if (result.label !== userimage) {\n            checkCount++;\n            console.log(checkCount)\n            if (checkCount === 5) {\n              // 메세지 보내는 code +\n              state.session\n                .signal({\n                  data: `${state.myUserName} User Miss Match`, // Any string (optional)\n                  to: connectionData, // Array of Connection objects (optional. Broadcast to everyone if empty)\n                  type: \"missMatch\", // The type of message (optional)\n                })\n                .then(() => {\n                  console.log(\"메시지 전송 성공\");\n                })\n                .catch((error) => {\n                  console.error(error);\n                });\n              checkCount = 0;\n            }\n          } else {\n            checkCount = 0;\n          }\n        });\n      }, 3000);\n    }, 10000);\n  };\n\n  const loadLabeledImages = () => {\n    images.push(userimage)\n    return Promise.all(\n      images.map(async (label) => {\n        console.log(\"label\",label)\n        const descriptions = [];\n        const img = await faceapi.fetchImage(\n          `https://server-jik.herokuapp.com/static${label}`\n        );\n\n        const detections = await faceapi\n          .detectSingleFace(img)\n          .withFaceLandmarks()\n          .withFaceDescriptor();\n\n        descriptions.push(detections.descriptor);\n        return new faceapi.LabeledFaceDescriptors(label, descriptions);\n      })\n    );\n  };\n\n  const uploadVideo = () => {\n    message.loading(\"Video Uploading...\", 25);\n    var fileKey =\n      encodeURIComponent(albumName) +\n      \"/\" +\n      state.mySessionId +\n      \"/\" +\n      state.myUserName;\n    s3.upload(\n      {\n        Key: fileKey,\n        Body: blob,\n        ACL: \"public-read\",\n      },\n      function (err, data) {\n        if (err) {\n          return message.error(`${err.message} error occured!!!`);\n        }\n        message.success(\"Upload Success!!!\", 5);\n      }\n    );\n  };\n\n  const handleChangeSessionId = (e) => {\n    setState({\n      ...state,\n      mySessionId: e.target.value,\n    });\n  };\n\n  const handleChangeUserName = (e) => {\n    setState({\n      ...state,\n      myUserName: e.target.value,\n    });\n  };\n\n  const handleMainVideoStream = (stream) => {\n    if (state.mainStreamManager !== stream) {\n      setState({\n        ...state,\n        mainStreamManager: stream,\n      });\n    }\n  };\n\n  const deleteSubscriber = (streamManager) => {\n    let subscribers = state.subscribers;\n    let index = subscribers.indexOf(streamManager, 0);\n    if (index > -1) {\n      subscribers.splice(index, 1);\n      setState({\n        ...state,\n        subscribers: subscribers,\n      });\n    }\n  };\n\n  const joinSession = async () => {\n    if (UserExamCode !== String(ExamCode)) {\n      alert(\"시험 코드가 잘못되었습니다 다시 확인해주세요.\");\n    } else {\n      console.log(\"ExamId\", ExamId);\n      let body = {\n        Exam_id: ExamId,\n      };\n\n      dispatch(FetchExam(body)).then((response) => {\n        if (response.payload.fetchSuccess) {\n          console.log(\"fetchExam: \", response.payload);\n          var arr = response.payload.QuestionIdx;\n          console.log(\"arr\", arr);\n          setTotalQuestions(arr.length * 10);\n          for (let i = 0; i < arr.length; i++) {\n            dispatch(FetchQuestions({ Question_id: arr[i] })).then(\n              (response) => {\n                console.log(response.payload);\n                if (response.payload.fetchSuccess) {\n                  console.log(response.payload);\n                  ExamQuestions.push(response.payload.QuestionInfo);\n                  ExamAnswers.push(\"\");\n                  if (i == 0) {\n                    setnowQuestion({\n                      title: ExamQuestions[0].title,\n                      choice1: ExamQuestions[0].choice[0],\n                      choice2: ExamQuestions[0].choice[1],\n                      choice3: ExamQuestions[0].choice[2],\n                      choice4: ExamQuestions[0].choice[3],\n                    });\n                    console.log(\"nodwQestion: \", nowQuestion);\n                    userimage = (user.loginSuccess.user.image).substring(6)\n                  }\n                }\n              }\n            );\n          }\n         \n          setRoomNo(1);\n        } else {\n          alert(\"Eaxm failed\");\n        }\n      });\n    }\n\n    // --- 1) Get an OpenVidu object ---\n    OV = await new OpenVidu();\n\n    // --- 2) Init a session ---\n    await setState({\n      ...state,\n      mySessionId: document.getElementById(\"basic_Room\").value,\n      myUserName: user.loginSuccess.user.name,\n      session: await OV.initSession(),\n    });\n  };\n\n  const afterCreateSession = () => {\n    var mySession = state.session;\n    // --- 3) Specify the actions when events take place in the session ---\n    // On every new Stream received...\n\n    mySession.on(\"connectionCreated\", async (event) => {\n      if (\n        state.myUserName === \"User\" &&\n        event.connection.remoteOptions !== undefined\n      ) {\n        await connectionData.push(event.connection);\n      } else {\n        if (\n          event.connection.remoteOptions !== undefined &&\n          event.connection.remoteOptions[\"metadata\"].substring(\n            15,\n            event.connection.remoteOptions[\"metadata\"].length - 2\n          ) === \"User\"\n        ) {\n          await connectionData.push(event.connection);\n        }\n      }\n    });\n\n    mySession.on(\"streamCreated\", (event) => {\n      // Subscribe to the Stream to receive it. Second parameter is undefined\n      // so OpenVidu doesn't create an HTML video by its own\n      var subscriber = mySession.subscribe(event.stream, undefined);\n\n      var subscribers = state.subscribers;\n      subscribers.push(subscriber);\n\n      // Update the state with the new subscribers\n      setState({\n        ...state,\n        subscribers: subscribers,\n      });\n    });\n\n    // On every Stream destroyed...\n    mySession.on(\"streamDestroyed\", (event) => {\n      // Remove the stream from 'subscribers'\n      deleteSubscriber(event.stream.streamManager);\n    });\n\n    mySession.on(\"signal:zeroFace\", (event) => {\n      const key = `open${Date.now()}`;\n      const btn = (\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          onClick={() => notification.close(key)}\n        >\n          Confirm\n        </Button>\n      );\n      notification.open({\n        message: \"Zero Face\",\n        description: event.data,\n        btn,\n        key,\n        onClose: () => {\n          console.log(\"Close\");\n        },\n      });\n    });\n\n    mySession.on(\"signal:doubleFace\", (event) => {\n      const key = `open${Date.now()}`;\n      const btn = (\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          onClick={() => notification.close(key)}\n        >\n          Confirm\n        </Button>\n      );\n      notification.open({\n        message: \"Double Face\",\n        description: event.data,\n        btn,\n        key,\n        onClose: () => {\n          console.log(\"Close\");\n        },\n      });\n    });\n\n    mySession.on(\"signal:cellPhoneDetect\", (event) => {\n      const key = `open${Date.now()}`;\n      const btn = (\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          onClick={() => notification.close(key)}\n        >\n          Confirm\n        </Button>\n      );\n      notification.open({\n        message: \"Cell Phone Detect\",\n        description: event.data,\n        btn,\n        key,\n        onClose: () => {\n          console.log(\"Close\");\n        },\n      });\n    });\n\n    mySession.on(\"signal:sideFaceDetect\", (event) => {\n      const key = `open${Date.now()}`;\n      const btn = (\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          onClick={() => notification.close(key)}\n        >\n          Confirm\n        </Button>\n      );\n      notification.open({\n        message: \"Side Face Detect\",\n        description: event.data,\n        btn,\n        key,\n        onClose: () => {\n          console.log(\"Close\");\n        },\n      });\n    });\n\n    mySession.on(\"signal:missMatch\", (event) => {\n      const key = `open${Date.now()}`;\n      const btn = (\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          onClick={() => notification.close(key)}\n        >\n          Confirm\n        </Button>\n      );\n      notification.open({\n        message: \"User Miss Match\",\n        description: event.data,\n        btn,\n        key,\n        onClose: () => {\n          console.log(\"Close\");\n        },\n      });\n    });\n\n    mySession.on(\"signal:endTest\", (event) => {\n      const key = `open${Date.now()}`;\n      const btn = (\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          onClick={() => notification.close(key)}\n        >\n          Confirm\n        </Button>\n      );\n      notification.open({\n        message: \"시험 종료 알림\",\n        description: event.data,\n        btn,\n        key,\n        onClose: () => {\n          console.log(\"Close\");\n        },\n      });\n    });\n\n    // --- 4) Connect to the session with a valid user token ---\n    // 'getToken' method is simulating what your server-side should do.\n    // 'token' parameter should be retrieved and returned by your own backend\n\n    getToken().then((token) => {\n      // First param is the token got from OpenVidu Server. Second param can be retrieved by every user on event\n      // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n      mySession.connect(token, { clientData: state.myUserName }).then(() => {\n        // --- 5) Get your own camera stream ---\n        // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n        // element: we will manage it on our own) and with the desired properties\n        if (state.myUserName !== \"User\") {\n          let publisher = OV.initPublisher(undefined, {\n            audioSource: undefined, // The source of audio. If undefined default microphone\n            videoSource: \"screen\", // The source of video. If undefined default webcam\n            publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\n            publishVideo: true, // Whether you want to start publishing with your video enabled or not\n            resolution: \"640x480\", // The resolution of your video\n            frameRate: 30, // The frame rate of your video\n            insertMode: \"APPEND\", // How the video is inserted in the target element 'video-container'\n            mirror: false, // Whether to mirror your local video or not\n          });\n\n          // --- 6) Publish your stream ---\n          mySession.publish(publisher);\n\n          // Set the main video in the page to display our webcam and store our Publisher\n          setState({\n            mySessionId: state.mySessionId,\n            myUserName: state.myUserName,\n            session: state.session,\n            mainStreamManager: publisher,\n            publisher: publisher,\n            subscribers: state.subscribers,\n          });\n        }\n      });\n    });\n  };\n\n  const leaveSession = () => {\n    // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n    if (state.session) {\n      state.session.disconnect();\n    }\n\n    // Empty all properties...\n    OV = null;\n    setState({\n      session: undefined,\n      subscribers: [],\n      mySessionId: \"Room01\",\n      myUserName: \"User\" + Math.floor(Math.random() * 100),\n      mainStreamManager: undefined,\n      publisher: undefined,\n    });\n  };\n\n  const leaveTest = () => {\n    leaveSession();\n    setInital(1);\n  };\n\n  useEffect(async () => {\n    console.log(state);\n    if (state.session !== undefined) {\n      await afterCreateSession();\n    }\n  }, [state.session]);\n\n  useEffect(() => {\n    const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n    Promise.all([\n      faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL),\n      faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n      faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n      faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n    ]).then(() => {\n      leaveSession();\n      setInital(1);\n    });\n  }, []);\n\n  const onUserExamCode = (event) => {\n    setUserExamCode(event.currentTarget.value);\n  };\n\n  const onExamIdHandler = (event) => {\n    setExamId(event.currentTarget.value);\n  };\n\n  function onChangeHandler(checkedValues) {\n    setRadioValue(checkedValues.target.value);\n    ExamAnswers[nowQuestionidx - 1] = checkedValues.target.value;\n  }\n\n  function onChangeQuestions(Numbers) {\n    setnowQuestionidx(Numbers);\n    setnowQuestion({\n      title: ExamQuestions[Numbers - 1].title,\n      choice1: ExamQuestions[Numbers - 1].choice[0],\n      choice2: ExamQuestions[Numbers - 1].choice[1],\n      choice3: ExamQuestions[Numbers - 1].choice[2],\n      choice4: ExamQuestions[Numbers - 1].choice[3],\n    });\n\n    if (ExamAnswers[Numbers - 1] === \"\") {\n      setRadioValue(\"\");\n    } else {\n      setRadioValue(ExamAnswers[Numbers - 1]);\n    }\n  }\n  const onSearch = (value) => {\n    ExamId = value;\n    setExamId(value);\n    dispatch(FetchExam({ Exam_id: ExamId })).then((response) => {\n      if (response.payload.fetchSuccess) {\n        setExamCode(response.payload.Exam_code);\n        if (user.loginSuccess && user.loginSuccess.user.role === 1) {\n          console.log(response.payload.fetchSuccess);\n          alert(`${value}시험의 방 코드 500586를 응시자에게 알려주세요.`);\n        } else {\n          alert(`${value}시험의 방 코드를 입력하세요.`);\n          setUserDisabled(false);\n        }\n      } else {\n        alert(`${value} 이름을 가진 시험이 없습니다.`);\n      }\n    });\n  };\n  // submit\n  const onSubmitHandler = (event) => {\n    // 계속 새로고침 방지\n    event.preventDefault();\n    let body = {\n      Exam_id: ExamId,\n    };\n\n    dispatch(FetchExam(body)).then((response) => {\n      if (response.payload.fetchSuccess) {\n        var arr = response.payload.QuestionIdx;\n        setTotalQuestions(arr.length * 10);\n        for (let i = 0; i < arr.length; i++) {\n          dispatch(FetchQuestions({ Question_id: arr[i] })).then((response) => {\n            if (response.payload.fetchSuccess) {\n              ExamQuestions.push(response.payload.QuestionInfo);\n              ExamAnswers.push(\"\");\n              console.log(ExamQuestions);\n              console.log(ExamAnswers);\n              if (i === 0) {\n                setnowQuestion({\n                  title: ExamQuestions[0].title,\n                  choice1: ExamQuestions[0].choice[0],\n                  choice2: ExamQuestions[0].choice[1],\n                  choice3: ExamQuestions[0].choice[2],\n                  choice4: ExamQuestions[0].choice[3],\n                });\n                console.log(nowQuestion);\n              }\n            }\n          });\n        }\n        setRoomNo(1);\n      } else {\n        alert(\"Eaxm failed\");\n      }\n    });\n  };\n\n  const onEndExamHandler = (event) => {\n    // 계속 새로고침 방지\n    event.preventDefault();\n\n    let cnt = 0;\n    let missing = [];\n\n    for (let i = 0; i < ExamAnswers.length; i++) {\n      if (ExamAnswers[i] == \"\") {\n        cnt++;\n        missing.push(i + 1);\n      }\n    }\n    if (cnt !== 0) {\n      alert(`${missing} 번을 아직 풀지 않았습니다.`);\n    } else {\n      correct = 0;\n      for (let i = 0; i < ExamAnswers.length; i++) {\n        if (ExamAnswers[i] == ExamQuestions[i].correct_idx) {\n          correct++;\n        }\n      }\n      score = (correct / ExamQuestions.length) * 100;\n      setTimer(0);\n      setTest(10);\n      alert(\"영상 제출 버튼을 눌러 영상을 제출하고 점수를 확인하세요.\");\n    }\n  };\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 12 },\n      sm: { span: 10 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 5 },\n    },\n  };\n\n  if (initial === 0) {\n    return <Spin className=\"beforeTest\" tip=\"Model Loading...\"></Spin>;\n  } else if (initial === 1 && state.session === undefined) {\n    return (\n      <div className=\"beforeTest\">\n        <Form\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={joinSession}\n        >\n          <Form.Item\n            id=\"Room\"\n            label=\"Room\"\n            name=\"Room\"\n            initialValue={state.mySessionId}\n            rules={[\n              {\n                required: true,\n                message: \"Please input RoomNumber!\",\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item label=\"Exam Name\">\n            <Search placeholder=\"Input Exam Name\" onSearch={onSearch} />\n          </Form.Item>\n          <Form.Item label=\"Exam Code\">\n            <Input\n              size=\"large\"\n              placeholder=\"ExamCode\"\n              value={UserExamCode}\n              onChange={onUserExamCode}\n              disabled={UserDisabled}\n            />\n          </Form.Item>\n\n          <Form.Item label=\"User\">\n            <Input\n              size=\"large\"\n              placeholder={user.loginSuccess.user.name}\n              prefix={<UserOutlined />}\n              disabled={true}\n            />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" shape=\"round\" htmlType=\"submit\">\n              JOIN\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  } else if (\n    initial === 1 &&\n    state.session !== undefined &&\n    user.loginSuccess.user.role === 1\n  ) {\n    return (\n      <Layout>\n        <Sider theme={\"light\"} width={\"22vw\"}>\n          <PageHeader\n            onBack={leaveSession}\n            title={state.mySessionId}\n            subTitle={state.myUserName}\n          />\n          <hr />\n          <div>접속 중인 사용자</div>\n          <hr />\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={state.subscribers}\n            renderItem={(item) => (\n              <div>\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={<Avatar size={50}>USER</Avatar>}\n                    title={item[\"stream\"][\"connection\"][\"data\"].substring(\n                      15,\n                      item[\"stream\"][\"connection\"][\"data\"].length - 2\n                    )}\n                    description=\"시험 방에 입장했습니다.\"\n                  />\n                </List.Item>\n                <hr />\n              </div>\n            )}\n          />\n        </Sider>\n        <Content>\n          <div id=\"video-container\">\n            {state.subscribers.map((sub, i) => (\n              <div\n                key={i}\n                className=\"stream-container\"\n                onClick={() => handleMainVideoStream(sub)}\n              >\n                <UserVideoComponent streamManager={sub} />\n              </div>\n            ))}\n          </div>\n        </Content>\n        <Sider theme={\"light\"} width={\"12vw\"}>\n          <iframe\n            src=\"https://service.dongledongle.com/developjik\"\n            title=\"chat\"\n            width=\"100%\"\n            height=\"600\"\n          ></iframe>\n        </Sider>\n      </Layout>\n    );\n  } else if (\n    initial === 1 &&\n    state.session !== undefined &&\n    user.loginSuccess.user.role === 0\n  ) {\n    return (\n      <Layout>\n        <Sider theme={\"light\"} width={\"22vw\"}>\n          <PageHeader\n            onBack={leaveSession}\n            title={state.mySessionId}\n            subTitle={state.myUserName}\n          />\n          <hr />\n          {timer === 0 ? null : (\n            <div>\n              <Countdown\n                title=\"Countdown\"\n                value={Date.now() + 1000 * 60 * 60 + 30 * 1000}\n                onFinish={leaveTest}\n              />\n              <hr />\n            </div>\n          )}\n          <video id=\"video\" ref={videoRef} autoPlay />\n        </Sider>\n        <Content>\n          {timer === 0 ? null : (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                width: \"100%\",\n                height: \"50vh\",\n              }}\n            >\n              <form style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <Radio.Group\n                  style={{\n                    display: \"block\",\n                    height: \"30px\",\n                    lineHeight: \"30px\",\n                  }}\n                  value={RadioValue}\n                  onChange={onChangeHandler}\n                >\n                  <Row gutter={[0, 24]}>\n                    <Col span={100}>\n                      <Title level={2}>Q. {nowQuestion.title}</Title>\n                    </Col>\n                  </Row>\n                  <Row gutter={[0, 24]}>\n                    <Col span={24}>\n                      <Radio value=\"1\">{nowQuestion.choice1}</Radio>\n                    </Col>\n                  </Row>\n                  <Row gutter={[0, 24]}>\n                    <Col span={100}>\n                      <Radio value=\"2\">{nowQuestion.choice2}</Radio>\n                    </Col>\n                  </Row>\n                  <Row gutter={[0, 24]}>\n                    <Col span={100}>\n                      <Radio value=\"3\">{nowQuestion.choice3}</Radio>\n                    </Col>\n                  </Row>\n                  <Row gutter={[0, 24]}>\n                    <Col span={100}>\n                      <Radio value=\"4\">{nowQuestion.choice4}</Radio>\n                    </Col>\n                  </Row>\n                  <Row gutter={[0, 24]}>\n                    <Col span={100}>\n                      <Pagination\n                        simple\n                        total={TotalQuestions}\n                        current={nowQuestionidx}\n                        onChange={onChangeQuestions}\n                      />\n                    </Col>\n                  </Row>\n                  <Row gutter={[0, 24]}>\n                    <Col span={100}>\n                      <Button\n                        id=\"testendBtn\"\n                        type=\"primary\"\n                        shape=\"round\"\n                        icon={<RightSquareOutlined />}\n                        size={\"large\"}\n                        htmlType=\"submitTe\"\n                        onClick={onEndExamHandler}\n                      >\n                        시험 제출\n                      </Button>\n                    </Col>\n                  </Row>\n                </Radio.Group>\n              </form>\n            </div>\n          )}\n        </Content>\n        <Sider theme={\"light\"} width={\"12vw\"}>\n          <div id=\"button\">\n            <Button\n              id=\"startTest\"\n              type=\"primary\"\n              shape=\"round\"\n              onClick={startTest}\n              style={{ margin: \"0.5vh\" }}\n            >\n              시험 시작\n            </Button>\n            <Button\n              id=\"startDownload\"\n              type=\"primary\"\n              shape=\"round\"\n              onClick={startDownload}\n              style={{ margin: \"0.5vh\" }}\n            >\n              영상 제출\n            </Button>\n          </div>\n          <hr />\n          <iframe\n            src=\"https://service.dongledongle.com/developjik\"\n            title=\"chat\"\n            width=\"100%\"\n          ></iframe>\n        </Sider>\n      </Layout>\n    );\n  } else if (initial === 2) {\n    return (\n      <div\n        \n      >\n        <Result\n          status=\"success\"\n          title=\"시험 종료\"\n          extra={[\n            <Button type=\"primary\" key=\"console\" onClick={leaveTest}>\n              <a href=\"/\">Home</a>\n            </Button>,\n          ]}\n        />\n        <div style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontSize: \"large\"\n        }}>\n           {score}점 {ExamQuestions.length}문제 중에 {correct}문제 맞췄습니다.\n        </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default withRouter(JoinRoomPage);\n","/Users/developjik/Desktop/recog/src/components/views/RoomPage/OvVideo.js",[],"/Users/developjik/Desktop/recog/src/hoc/auth.js",["117","118","119"],"/Users/developjik/Desktop/recog/src/_actions/user_action.js",["120"],"import Axios from 'axios';\nimport {useSelector} from 'react-redux';\nimport {\n  LOGIN_USER,\n  REGISTER_USER,\n  AUTH_USER,\n  UPLOAD_QUESTION,\n  MAKE_TEST,\n  FETCH_EXAM,\n  FETCH_QUESTIONS,\n  // FETCH_USER_ROLE\n} from './type'\n\nexport function loginUser(dataToSubmit){\n\n  const request = Axios.post('https://server-jik.herokuapp.com/api/users/login', dataToSubmit)\n    .then(response => response.data)\n\n  return{\n    type: LOGIN_USER,\n    payload: request\n  }\n}\n\nexport function registerUser(dataToSubmit){\n\n  const request = Axios.post('https://server-jik.herokuapp.com/api/users/register', dataToSubmit)\n    .then(response => response.data)\n  return{\n    type: REGISTER_USER,\n    payload: request\n  }\n}\n\nexport function auth(dataToSubmit){\n\n  const request = Axios.post('https://server-jik.herokuapp.com/api/users/auth', dataToSubmit)\n    .then(response => response.data)\n    \n  return{\n    type: AUTH_USER,\n    payload: request\n  }\n}\n\nexport function UploadQuestion(dataToSubmit){\n\n  const request = Axios.post('https://server-jik.herokuapp.com/api/test/UploadQuestion', dataToSubmit)\n    .then(response => response.data)\n\n  return{\n    type: UPLOAD_QUESTION,\n    payload: request\n  }\n}\n\nexport function MakeTest(dataToSubmit){\n\n  const request = Axios.post('https://server-jik.herokuapp.com/api/test/maketest', dataToSubmit)\n    .then(response => response.data)\n\n  return{\n    type: MAKE_TEST,\n    payload: request\n  }\n}\n\nexport function FetchExam(dataToSubmit){\n \n  const request = Axios.post('https://server-jik.herokuapp.com/api/room/fetchexam', dataToSubmit)\n    .then(response => response.data)\n  console.log(request)\n  return{\n    type: FETCH_EXAM,\n    payload: request\n  }\n}\n\nexport function FetchQuestions(dataToSubmit){\n \n  const request = Axios.post('https://server-jik.herokuapp.com/api/room/fetchquestions', dataToSubmit)\n    .then(response => response.data)\n  return{\n    type: FETCH_QUESTIONS,\n    payload: request\n  }\n}\n\n// export function FetchUserRole(dataToSubmit){\n \n//   const request = Axios.post('/api/users/fetchuserrole', dataToSubmit)\n//     .then(response => response.data)\n//   console.log(request)\n//   return{\n//     type: FETCH_USER_ROLE,\n//     payload: request\n//   }\n// }","/Users/developjik/Desktop/recog/src/components/views/RoomPage/UserVideoComponent.js",[],"/Users/developjik/Desktop/recog/src/_reducers/user_reducer.js",["121","122","123","124","125","126"],"import{\n  LOGIN_USER,\n  REGISTER_USER,\n  AUTH_USER,\n  FETCH_EXAM,\n  FETCH_QUESTIONS\n} from '../_actions/type';\n\nexport default function(state = {}, action){\n  \n  switch (action.type) {\n    case LOGIN_USER:\n        return{ ...state, loginSuccess: action.payload }\n      break;\n    \n    case REGISTER_USER:\n        return{ ...state, register: action.payload}\n      break;\n      \n    case AUTH_USER:\n        return{ ...state, userData: action.payload}    \n      break;\n\n    case FETCH_EXAM:\n        return{ ...state, fetchSuccess: action.payload}\n      break;\n    \n    case FETCH_QUESTIONS:\n        return{ ...state, fetchSuccess: action.payload}\n      break;\n      \n    default:\n      return state;\n  }\n}","/Users/developjik/Desktop/recog/src/components/views/NavBar/NavBar.js",[],"/Users/developjik/Desktop/recog/src/_actions/type.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":6,"column":31,"nodeType":"135","messageId":"136","endLine":6,"endColumn":37},{"ruleId":"133","severity":1,"message":"137","line":7,"column":44,"nodeType":"135","messageId":"136","endLine":7,"endColumn":58},{"ruleId":"133","severity":1,"message":"138","line":8,"column":10,"nodeType":"135","messageId":"136","endLine":8,"endColumn":22},{"ruleId":"127","replacedBy":"139"},{"ruleId":"129","replacedBy":"140"},{"ruleId":"133","severity":1,"message":"141","line":21,"column":24,"nodeType":"135","messageId":"136","endLine":21,"endColumn":39},{"ruleId":"133","severity":1,"message":"142","line":33,"column":3,"nodeType":"135","messageId":"136","endLine":33,"endColumn":16},{"ruleId":"133","severity":1,"message":"143","line":34,"column":3,"nodeType":"135","messageId":"136","endLine":34,"endColumn":15},{"ruleId":"133","severity":1,"message":"144","line":40,"column":16,"nodeType":"135","messageId":"136","endLine":40,"endColumn":20},{"ruleId":"133","severity":1,"message":"145","line":104,"column":9,"nodeType":"135","messageId":"136","endLine":104,"endColumn":22},{"ruleId":"133","severity":1,"message":"146","line":109,"column":10,"nodeType":"135","messageId":"136","endLine":109,"endColumn":19},{"ruleId":"133","severity":1,"message":"147","line":109,"column":21,"nodeType":"135","messageId":"136","endLine":109,"endColumn":33},{"ruleId":"133","severity":1,"message":"148","line":110,"column":10,"nodeType":"135","messageId":"136","endLine":110,"endColumn":16},{"ruleId":"133","severity":1,"message":"149","line":119,"column":25,"nodeType":"135","messageId":"136","endLine":119,"endColumn":41},{"ruleId":"133","severity":1,"message":"150","line":120,"column":23,"nodeType":"135","messageId":"136","endLine":120,"endColumn":37},{"ruleId":"151","severity":1,"message":"152","line":342,"column":35,"nodeType":"153","messageId":"154","endLine":342,"endColumn":37},{"ruleId":"133","severity":1,"message":"155","line":364,"column":9,"nodeType":"135","messageId":"136","endLine":364,"endColumn":21},{"ruleId":"133","severity":1,"message":"156","line":371,"column":9,"nodeType":"135","messageId":"136","endLine":371,"endColumn":25},{"ruleId":"133","severity":1,"message":"157","line":412,"column":9,"nodeType":"135","messageId":"136","endLine":412,"endColumn":28},{"ruleId":"133","severity":1,"message":"158","line":418,"column":7,"nodeType":"135","messageId":"136","endLine":418,"endColumn":30},{"ruleId":"133","severity":1,"message":"159","line":501,"column":9,"nodeType":"135","messageId":"136","endLine":501,"endColumn":30},{"ruleId":"133","severity":1,"message":"160","line":508,"column":9,"nodeType":"135","messageId":"136","endLine":508,"endColumn":29},{"ruleId":"161","severity":1,"message":"162","line":553,"column":15,"nodeType":"153","messageId":"163","endLine":571,"endColumn":16},{"ruleId":"164","severity":1,"message":"165","line":559,"column":25,"nodeType":"166","messageId":"167","endLine":559,"endColumn":27},{"ruleId":"168","severity":1,"message":"169","line":834,"column":13,"nodeType":"153","endLine":839,"endColumn":4},{"ruleId":"168","severity":1,"message":"170","line":839,"column":6,"nodeType":"171","endLine":839,"endColumn":21,"suggestions":"172"},{"ruleId":"168","severity":1,"message":"173","line":852,"column":6,"nodeType":"171","endLine":852,"endColumn":8,"suggestions":"174"},{"ruleId":"133","severity":1,"message":"175","line":858,"column":9,"nodeType":"135","messageId":"136","endLine":858,"endColumn":24},{"ruleId":"133","severity":1,"message":"176","line":902,"column":9,"nodeType":"135","messageId":"136","endLine":902,"endColumn":24},{"ruleId":"164","severity":1,"message":"165","line":948,"column":26,"nodeType":"166","messageId":"167","endLine":948,"endColumn":28},{"ruleId":"164","severity":1,"message":"165","line":958,"column":28,"nodeType":"166","messageId":"167","endLine":958,"endColumn":30},{"ruleId":"133","severity":1,"message":"177","line":969,"column":9,"nodeType":"135","messageId":"136","endLine":969,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":6,"column":1,"nodeType":"180","endLine":40,"endColumn":2},{"ruleId":"133","severity":1,"message":"181","line":7,"column":9,"nodeType":"135","messageId":"136","endLine":7,"endColumn":14},{"ruleId":"168","severity":1,"message":"182","line":34,"column":8,"nodeType":"171","endLine":34,"endColumn":10,"suggestions":"183"},{"ruleId":"133","severity":1,"message":"184","line":2,"column":9,"nodeType":"135","messageId":"136","endLine":2,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":9,"column":1,"nodeType":"180","endLine":35,"endColumn":2},{"ruleId":"185","severity":1,"message":"186","line":14,"column":7,"nodeType":"187","messageId":"188","endLine":14,"endColumn":13},{"ruleId":"185","severity":1,"message":"186","line":18,"column":7,"nodeType":"187","messageId":"188","endLine":18,"endColumn":13},{"ruleId":"185","severity":1,"message":"186","line":22,"column":7,"nodeType":"187","messageId":"188","endLine":22,"endColumn":13},{"ruleId":"185","severity":1,"message":"186","line":26,"column":7,"nodeType":"187","messageId":"188","endLine":26,"endColumn":13},{"ruleId":"185","severity":1,"message":"186","line":30,"column":7,"nodeType":"187","messageId":"188","endLine":30,"endColumn":13},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],["189"],["190"],"no-unused-vars","'Upload' is defined but never used.","Identifier","unusedVar","'UploadOutlined' is defined but never used.","'FormProvider' is defined but never used.",["189"],["190"],"'setQuestionsIds' is assigned a value but never used.","'LoginOutlined' is defined but never used.","'FormOutlined' is defined but never used.","'Text' is assigned a value but never used.","'userLoginInfo' is assigned a value but never used.","'Questions' is assigned a value but never used.","'setQuestions' is assigned a value but never used.","'RoomNo' is assigned a value but never used.","'setExamQuestions' is assigned a value but never used.","'setExamAnswers' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'startMyModel' is assigned a value but never used.","'sidefaceInterval' is assigned a value but never used.","'startRecognizeFaces' is assigned a value but never used.","'faceReocogCheckInterval' is assigned a value but never used.","'handleChangeSessionId' is assigned a value but never used.","'handleChangeUserName' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'userimage'.","unsafeRefs","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'afterCreateSession' and 'state'. Either include them or remove the dependency array.","ArrayExpression",["191"],"React Hook useEffect has a missing dependency: 'leaveSession'. Either include it or remove the dependency array.",["192"],"'onExamIdHandler' is assigned a value but never used.","'onSubmitHandler' is assigned a value but never used.","'formItemLayout' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.history'. Either include them or remove the dependency array.",["193"],"'useSelector' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [afterCreateSession, state, state.session]",{"range":"200","text":"201"},"Update the dependencies array to be: [leaveSession]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch, props.history]",{"range":"204","text":"205"},[24488,24503],"[afterCreateSession, state, state.session]",[24919,24921],"[leaveSession]",[906,908],"[dispatch, props.history]"]